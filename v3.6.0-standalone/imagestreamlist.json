{
  "description": "ImageStreamList is a list of ImageStream objects.",
  "required": [
    "items"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources",
      "type": [
        "string",
        "null"
      ]
    },
    "items": {
      "description": "Items is a list of imageStreams",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "description": "ImageStream stores a mapping of tags to images, metadata overrides that are applied when images are tagged in a stream, and an optional reference to a Docker image repository on a registry.",
        "required": [
          "spec"
        ],
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources",
            "type": [
              "string",
              "null"
            ]
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
            "type": [
              "string",
              "null"
            ]
          },
          "metadata": {
            "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
            "properties": {
              "annotations": {
                "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
                "type": "object",
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "clusterName": {
                "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "creationTimestamp": {
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "deletionGracePeriodSeconds": {
                "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
                "type": "integer",
                "format": "int64"
              },
              "deletionTimestamp": {
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "finalizers": {
                "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.",
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "generateName": {
                "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency",
                "type": [
                  "string",
                  "null"
                ]
              },
              "generation": {
                "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
                "type": "integer",
                "format": "int64"
              },
              "labels": {
                "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
                "type": "object",
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "name": {
                "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                "type": [
                  "string",
                  "null"
                ]
              },
              "namespace": {
                "description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
                "type": [
                  "string",
                  "null"
                ]
              },
              "ownerReferences": {
                "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "description": "OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.",
                  "required": [
                    "apiVersion",
                    "kind",
                    "name",
                    "uid"
                  ],
                  "properties": {
                    "apiVersion": {
                      "description": "API version of the referent.",
                      "type": "string"
                    },
                    "blockOwnerDeletion": {
                      "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
                      "type": "boolean"
                    },
                    "controller": {
                      "description": "If true, this reference points to the managing controller.",
                      "type": "boolean"
                    },
                    "kind": {
                      "description": "Kind of the referent. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                      "type": "string"
                    },
                    "uid": {
                      "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
                      "type": "string"
                    }
                  }
                }
              },
              "resourceVersion": {
                "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency",
                "type": [
                  "string",
                  "null"
                ]
              },
              "selfLink": {
                "description": "SelfLink is a URL representing this object. Populated by the system. Read-only.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "uid": {
                "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          },
          "spec": {
            "description": "ImageStreamSpec represents options for ImageStreams.",
            "properties": {
              "dockerImageRepository": {
                "description": "dockerImageRepository is optional, if specified this stream is backed by a Docker repository on this server",
                "type": [
                  "string",
                  "null"
                ]
              },
              "lookupPolicy": {
                "description": "ImageLookupPolicy describes how an image stream can be used to override the image references used by pods, builds, and other resources in a namespace.",
                "required": [
                  "local"
                ],
                "properties": {
                  "local": {
                    "description": "local will change the docker short image references (like \"mysql\" or \"php:latest\") on objects in this namespace to the image ID whenever they match this image stream, instead of reaching out to a remote registry. The name will be fully qualified to an image ID if found. The tag's referencePolicy is taken into account on the replaced value. Only works within the current namespace.",
                    "type": "boolean"
                  }
                }
              },
              "tags": {
                "description": "tags map arbitrary string values to specific image locators",
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "description": "TagReference specifies optional annotations for images using this tag and an optional reference to an ImageStreamTag, ImageStreamImage, or DockerImage this tag should track.",
                  "required": [
                    "name",
                    "annotations",
                    "generation"
                  ],
                  "properties": {
                    "annotations": {
                      "description": "Annotations associated with images using this tag",
                      "type": "object",
                      "additionalProperties": {
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    },
                    "from": {
                      "description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
                      "properties": {
                        "apiVersion": {
                          "description": "API version of the referent.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "fieldPath": {
                          "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "kind": {
                          "description": "Kind of the referent. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "name": {
                          "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "namespace": {
                          "description": "Namespace of the referent. More info: http://kubernetes.io/docs/user-guide/namespaces",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "resourceVersion": {
                          "description": "Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "uid": {
                          "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      }
                    },
                    "generation": {
                      "description": "Generation is the image stream generation that updated this tag - setting it to 0 is an indication that the generation must be updated. Legacy clients will send this as nil, which means the client doesn't know or care.",
                      "type": "integer",
                      "format": "int64"
                    },
                    "importPolicy": {
                      "description": "TagImportPolicy controls how images related to this tag will be imported.",
                      "properties": {
                        "insecure": {
                          "description": "Insecure is true if the server may bypass certificate verification or connect directly over HTTP during image import.",
                          "type": "boolean"
                        },
                        "scheduled": {
                          "description": "Scheduled indicates to the server that this tag should be periodically checked to ensure it is up to date, and imported",
                          "type": "boolean"
                        }
                      }
                    },
                    "name": {
                      "description": "Name of the tag",
                      "type": "string"
                    },
                    "reference": {
                      "description": "Reference states if the tag will be imported. Default value is false, which means the tag will be imported.",
                      "type": "boolean"
                    },
                    "referencePolicy": {
                      "description": "TagReferencePolicy describes how pull-specs for images in this image stream tag are generated when image change triggers in deployment configs or builds are resolved. This allows the image stream author to control how images are accessed.",
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "description": "Type determines how the image pull spec should be transformed when the image stream tag is used in deployment config triggers or new builds. The default value is `Source`, indicating the original location of the image should be used (if imported). The user may also specify `Local`, indicating that the pull spec should point to the integrated Docker registry and leverage the registry's ability to proxy the pull to an upstream registry. `Local` allows the credentials used to pull this image to be managed from the image stream's namespace, so others on the platform can access a remote image but have no access to the remote secret. It also allows the image layers to be mirrored into the local registry which the images can still be pulled even if the upstream registry is unavailable.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "status": {
            "description": "ImageStreamStatus contains information about the state of this image stream.",
            "required": [
              "dockerImageRepository"
            ],
            "properties": {
              "dockerImageRepository": {
                "description": "DockerImageRepository represents the effective location this stream may be accessed at. May be empty until the server determines where the repository is located",
                "type": "string"
              },
              "tags": {
                "description": "Tags are a historical record of images associated with each tag. The first entry in the TagEvent array is the currently tagged image.",
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "description": "NamedTagEventList relates a tag to its image history.",
                  "required": [
                    "tag",
                    "items"
                  ],
                  "properties": {
                    "conditions": {
                      "description": "Conditions is an array of conditions that apply to the tag event list.",
                      "type": [
                        "array",
                        "null"
                      ],
                      "items": {
                        "description": "TagEventCondition contains condition information for a tag event.",
                        "required": [
                          "type",
                          "status",
                          "generation"
                        ],
                        "properties": {
                          "generation": {
                            "description": "Generation is the spec tag generation that this status corresponds to",
                            "type": "integer",
                            "format": "int64"
                          },
                          "lastTransitionTime": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "format": "date-time"
                          },
                          "message": {
                            "description": "Message is a human readable description of the details about last transition, complementing reason.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "reason": {
                            "description": "Reason is a brief machine readable explanation for the condition's last transition.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "status": {
                            "description": "Status of the condition, one of True, False, Unknown.",
                            "type": "string"
                          },
                          "type": {
                            "description": "Type of tag event condition, currently only ImportSuccess",
                            "type": "string"
                          }
                        }
                      }
                    },
                    "items": {
                      "description": "Standard object's metadata.",
                      "type": "array",
                      "items": {
                        "description": "TagEvent is used by ImageStreamStatus to keep a historical record of images associated with a tag.",
                        "required": [
                          "created",
                          "dockerImageReference",
                          "image",
                          "generation"
                        ],
                        "properties": {
                          "created": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "dockerImageReference": {
                            "description": "DockerImageReference is the string that can be used to pull this image",
                            "type": "string"
                          },
                          "generation": {
                            "description": "Generation is the spec tag generation that resulted in this tag being updated",
                            "type": "integer",
                            "format": "int64"
                          },
                          "image": {
                            "description": "Image is the image",
                            "type": "string"
                          }
                        }
                      }
                    },
                    "tag": {
                      "description": "Tag is the tag for which the history is recorded",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "x-kubernetes-group-version-kind": [
          {
            "Group": "",
            "Version": "v1",
            "Kind": "ImageStream"
          },
          {
            "Group": "image.openshift.io",
            "Version": "v1",
            "Kind": "ImageStream"
          }
        ]
      }
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
      "type": [
        "string",
        "null"
      ]
    },
    "metadata": {
      "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
      "properties": {
        "resourceVersion": {
          "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency",
          "type": [
            "string",
            "null"
          ]
        },
        "selfLink": {
          "description": "SelfLink is a URL representing this object. Populated by the system. Read-only.",
          "type": [
            "string",
            "null"
          ]
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "Group": "",
      "Version": "v1",
      "Kind": "ImageStreamList"
    },
    {
      "Group": "image.openshift.io",
      "Version": "v1",
      "Kind": "ImageStreamList"
    }
  ],
  "$schema": "http://json-schema.org/schema#",
  "type": "object"
}